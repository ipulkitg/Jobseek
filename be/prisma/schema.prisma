// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  job_seeker
  employer
}

enum ApplicationStatus {
  applied
  reviewed
  interview
  rejected
  hired
}

model UserProfile {
  id          String   @id @default(uuid())
  userId      String   @unique @map("user_id")
  role        UserRole
  name        String
  email       String
  phone       String?
  locationState String? @map("location_state")
  locationCity  String? @map("location_city")
  skills      String[]
  resumeUrl   String?  @map("resume_url")
  companyName String?  @map("company_name")
  companyDescription String? @map("company_description")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  jobPostings JobPosting[] @relation("EmployerJobs")
  applications JobApplication[] @relation("JobSeekerApplications")
  locationStateRef USState? @relation(fields: [locationState], references: [id])

  @@map("user_profiles")
}

model JobCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  jobPostings JobPosting[]

  @@map("job_categories")
}

model USState {
  id          String   @id @default(uuid())
  name        String   @unique
  abbreviation String  @unique
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  userProfiles UserProfile[]
  jobPostings JobPosting[]

  @@map("us_states")
}

model JobPosting {
  id               String   @id @default(uuid())
  employerId       String   @map("employer_id")
  title            String
  description      String
  requirements     String
  locationState    String?  @map("location_state")
  locationCity     String?  @map("location_city")
  salaryMin        Int?     @map("salary_min")
  salaryMax        Int?     @map("salary_max")
  categoryId       String?  @map("category_id")
  applicationSteps String[] @default(["personal_info", "review_submit"]) @map("application_steps")
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  employer    UserProfile @relation("EmployerJobs", fields: [employerId], references: [id], onDelete: Cascade)
  category    JobCategory? @relation(fields: [categoryId], references: [id])
  locationStateRef USState? @relation(fields: [locationState], references: [id])
  applications JobApplication[] @relation("JobApplications")

  @@map("job_postings")
}

model JobApplication {
  id             String            @id @default(uuid())
  jobPostingId   String            @map("job_posting_id")
  jobSeekerId    String            @map("job_seeker_id")
  status         ApplicationStatus @default(applied)
  coverLetter    String?           @map("cover_letter")
  applicationData Json?            @map("application_data")
  appliedAt      DateTime          @default(now()) @map("applied_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")

  // Relations
  jobPosting    JobPosting @relation("JobApplications", fields: [jobPostingId], references: [id], onDelete: Cascade)
  jobSeeker     UserProfile @relation("JobSeekerApplications", fields: [jobSeekerId], references: [id], onDelete: Cascade)

  @@unique([jobPostingId, jobSeekerId])
  @@map("job_applications")
}

model Session {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  expiresAt   DateTime @map("expires_at")
  lastSeenAt  DateTime @updatedAt @map("last_seen_at")
  userAgent   String?  @map("user_agent")
  ip          String?

  @@index([userId])
  @@map("sessions")
}
